/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.github.kboeckler.adventOfCode22;

import com.github.kboeckler.adventOfCode22.solution.Solution;
import org.apache.commons.io.FileUtils;

import java.io.File;
import java.io.IOException;
import java.io.Serializable;
import java.lang.reflect.InvocationTargetException;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Runner {

    private volatile static Map<Integer, Solution> solutions = new HashMap<>();

    public synchronized static void registerSolution(int day, Solution solution) {
        solutions.put(day, solution);
    }

    private Runner(){
    }

    public static void main(String[] args) throws IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {
        scanSolutions();
        new Runner().run();
    }

    private static void scanSolutions() throws ClassNotFoundException, InstantiationException, InvocationTargetException {
        String solutionPath = Runner.class.getResource("solution").getFile();
        for (File file : new File(solutionPath).listFiles()) {
            String packageName = Runner.class.getPackage().getName();
            String binaryName = file.getAbsolutePath().replaceAll(".class", "").replaceAll("/", ".").replaceAll("\\\\", ".");
            int beginOfPath = binaryName.indexOf(packageName);
            binaryName = binaryName.substring(beginOfPath);
            Class<?> aClass = Runner.class.getClassLoader().loadClass(binaryName);
            if (Solution.class.isAssignableFrom(aClass) && !Solution.class.equals(aClass)) {
                try {
                    aClass.getDeclaredConstructor().newInstance();
                } catch (NoSuchMethodException | IllegalAccessException ex) {
                    System.err.println(String.format("%s has no public no-args constructor", aClass.getName()));
                    System.exit(-1);
                }
            }
        }
    }

    private void run() throws IOException {
        List<Integer> allDays = new ArrayList<>();
        for (int day = 1; day <= 24; day++) {
            if (solutions.containsKey(day)) {
                allDays.add(day);
            }
        }
        System.out.println("Welcome to Advent of Code 22");
        System.out.println("###############################");
        for (Integer day : allDays) {
            Solution solution = solutions.get(day);
            String inputFilename = solution.getClass().getSimpleName().toLowerCase() + ".txt";
            File inputFile = new File(Runner.class.getClassLoader().getResource(inputFilename).getFile());
            String fileContent = FileUtils.readFileToString(inputFile, Charset.forName("UTF-8"));
            String[] inputRows = fileContent.replaceAll("\r\n", "\n").split("\n");
            System.out.print(String.format("Solving day %d #", day));
            System.out.print(" Part1:... ");
            Serializable result1 = solution.solvePart1(inputRows);
            System.out.print(result1);
            System.out.print(" Part2:... ");
            Serializable result2 = solution.solvePart2(inputRows);
            System.out.print(result2);
            System.out.println();
        }
    }

}
